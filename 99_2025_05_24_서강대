## 🎤 1분 자기소개 (면접 버전)
안녕하세요, 백엔드 개발자 장준환입니다.
저는 물류, 이커머스, 메시징 플랫폼 등 다양한 도메인에서 실제 서비스 아키텍처를 설계하고 성능 최적화를 주도해 온 경험이 있습니다. 특히 Redis 기반 캐싱 구조 설계, Webflux와 Kafka를 활용한 대용량 데이터 수집, API 성능 병목 개선 등 구조적 문제 해결에 깊은 관심을 가져왔습니다.

이런 실무 경험을 바탕으로 더 체계적이고 이론적인 기반 위에서 소프트웨어 구조를 설계하고 싶다는 열망이 생겨 서강대학교 AI·SW 대학원에 지원하게 되었습니다. 석사 과정에서는 소프트웨어 설계와 아키텍처 분야의 이론을 집중적으로 학습하고, 실제 현장에서 발생하는 문제를 학문적으로 재해석해 해결할 수 있는 기술 리더로 성장하고자 합니다.

감사합니다.



## 🔍 1. 지원 동기 및 학업계획 관련

### Q1. 왜 서강대학교 AI·SW 대학원을 선택하셨나요?

서강대학교는 인공지능과 소프트웨어 시스템 분야에서 이론과 실무가 균형 있게 설계된 커리큘럼을 운영하고 있어 실무 기반의 기술을 학문적으로 확장하고 싶은 저에게 최적의 환경이라 판단했습니다. 특히, 현업에서 경험한 캐시 아키텍처, 분산 시스템 설계 등을 이론적으로 검증하고 싶다는 니즈가 있어, 교수진의 연구 주제와 산학 협력 기회가 풍부한 서강대에서 소프트웨어 아키텍처의 기반을 심화하고자 합니다.

---

### Q2. 학업 중 어떤 과목에 집중하고 싶으신가요?

소프트웨어 설계 및 아키텍처, 고급 객체지향 설계, 마이크로서비스 및 분산 시스템 과목에 집중하고 싶습니다. 설계 원칙(SOLID), 리팩토링, 캡슐화와 같은 개념들을 체계적으로 정립하고, 실무에서 직접 다룬 Redis 기반 캐시 설계, Kafka 기반 메시징 구조를 이론적으로 해석하고 싶은 목표가 있습니다. 또한 도메인 주도 설계(DDD)나 컴포넌트 기반 개발과 같은 현대적 설계 전략도 학습하고 싶습니다.

---

### Q3. 석사 과정을 통해 어떤 문제 해결 능력을 갖추고 싶으신가요?

장애 발생 지점을 사전에 파악하고, 확장성과 안정성을 모두 고려한 구조를 설계할 수 있는 **시스템 수준의 문제 해결 능력**을 갖추고 싶습니다. 특히 단일 서비스 성능 향상보다는 전체 서비스 아키텍처를 최적화할 수 있는 시야를 확보하는 것이 목표입니다. 실무에서 경험한 병목 제거, 캐시 무효화 전략, 메시지 지연 문제 등을 이론적으로 설명하고 재현할 수 있는 능력을 갖추고자 합니다.

---

### Q4. 향후 진로 목표는 무엇인가요?

저는 궁극적으로 시스템 전반의 기술적 의사결정을 리드할 수 있는 **솔루션 아키텍트**가 되고자 합니다. 현재 백엔드 개발자로 일하면서도 성능과 안정성, 유지보수성을 모두 고려한 구조 설계에 관심을 가져왔으며, 장기적으로는 DevOps, 클라우드 인프라, 보안까지 아우르는 **기술 전략가**로 성장해 복잡한 문제를 단순한 구조로 해결하는 역량을 갖추고 싶습니다.

---

## 🧠 기술 및 실무 경험

### Q5. Redis 기반 캐싱 아키텍처를 설명해주세요.

Redis는 인메모리 기반의 key-value 저장소로, 빠른 읽기 속도와 TTL 기능 덕분에 **정적 데이터 캐싱에 매우 적합합니다.** 캐싱 전략 수립 시엔 key 설계, TTL 관리, 무효화 시점 정의가 중요합니다. 실무에서는 이벤트 페이지, 상품 상세 조회 등의 고빈도 요청에 대해 **영역별 Redis 캐시를 설계**하고, 배치 + 수동 + 자동 갱신 방식으로 정합성을 유지하면서 응답 속도를 평균 27% 이상 향상시킨 경험이 있습니다.

---

### Q6. Webflux + Kafka 프로젝트에서의 기술적 도전은?

Webflux의 리액티브 구조는 적은 리소스로 높은 동시성을 지원하지만, backpressure 관리와 에러 전파 설계가 중요합니다. Kafka는 메시지 지연 없이 정확히 한 번 처리하려면 **Offset 관리 및 재처리 로직 설계**가 필요합니다. 저는 대용량 쇼핑몰 데이터를 비동기 수집하는 프로젝트에서 Webflux로 수집 로직을 구현하고 Kafka를 통해 수집 요청 메시지를 전달하는 구조를 설계했으며, 재시도 및 복구 전략까지 포함해 **수천 개 데이터의 안정적인 수집 처리**를 달성했습니다.

---

### Q7. Redis Lettuce 기반 락 구현 이유는?

Redisson은 고급 분산 락 기능을 제공하지만 메모리 오버헤드가 있고 Spring 4.x 환경에서는 호환성 문제가 발생했습니다. 따라서 **Netty 기반 비동기 구현이 가능한 Lettuce를 선택**하였고, `SET NX EX` 조합으로 락을 구현해 **TTL 기반 락 만료와 소유자 검증**을 통해 데드락을 방지했습니다. 이를 통해 프로모션 이벤트에서 **수만 건의 동시 요청에도 단 한 건의 충돌 없이 안정적으로 운영**할 수 있었습니다.

---

### Q8. 단일 책임 원칙(SRP)을 API 설계에 어떻게 적용하셨나요?

SRP는 메서드, 클래스뿐 아니라 **API 구조에도 적용할 수 있는 핵심 설계 원칙**입니다. 하나의 API에 다양한 로직이 섞이면 유지보수와 테스트가 어려워지므로, 저는 상품 상세 API를 조회, 리뷰, 추천 등으로 기능별 분리하고, 각 기능별 전담 컨트롤러/서비스로 재구성했습니다. 이 구조는 Swagger 문서화, 기능 테스트, 성능 병목 진단 시에도 큰 장점을 가졌고, **API 응답 속도를 약 72% 개선**하는 효과를 얻었습니다.

---

## 📚 전공 및 이론 질문

### Q9. MSA 환경에서 데이터 정합성 보장 방법은?

MSA에서 정합성 문제는 **서비스 간 트랜잭션 분리가 기본 전제이기 때문에 필연적인 도전 과제**입니다. 이를 해결하기 위해 SAGA 패턴(보상 트랜잭션)과 이벤트 기반 동기화 구조를 활용합니다. 저는 Kafka를 사용한 메시지 기반 설계에서 **idempotency 키, 중복 필터링 로직**, 그리고 메시지 순서를 위한 partition key 전략을 함께 설계해 서비스 간 상태 정합성을 유지했습니다.

---

### Q10. Webflux와 MVC의 차이는?

MVC는 요청당 스레드 1개를 사용하여 직관적이고 디버깅이 쉬운 반면, 대규모 비동기 I/O에는 적합하지 않습니다. Webflux는 **Netty 기반 논블로킹 구조**로, 수만 개의 요청도 적은 쓰레드로 처리할 수 있으며, 특히 외부 API 호출이 많은 환경에서 효과적입니다. 저는 외부 API 병렬 호출이 많은 데이터 수집 프로젝트에 Webflux를 도입해 **서버 자원 절감 및 처리 속도 개선**을 실현했습니다.

---

### Q11. SQL 성능 튜닝 시 인덱스는 어떻게 최적화했나요?

실행 계획(EXPLAIN PLAN)을 기반으로 **Full Scan 유무, Index Range Scan, 사용된 조건**을 분석합니다. 실무에서는 COUNT를 EXISTS로 대체하고, SELECT 절 내 컬럼을 포함한 **Covering Index**를 적용해 I/O를 줄였습니다. ETL 기반 통합 테이블을 별도 설계하여 복잡한 JOIN 대신 정제된 뷰를 제공하면서도 성능을 확보했습니다. 이 결과 쿼리 처리 속도가 약 30ms 이상 단축되었습니다.

---

### Q12. 비동기 처리 시 고려할 점은?

비동기 로직은 순차 실행이 보장되지 않기 때문에 **race condition, 에러 전파 방식, 작업 중단 시 복구 설계**가 중요합니다. Webflux에서는 `retryWhen`, `onErrorResume`, `timeout` 등을 조합해 장애를 복구할 수 있어야 하고, Kafka 기반의 분산 처리에서는 **failover 설계와 메시지 재처리 전략**도 필요합니다. 저는 외부 API 호출 시 에러 복구 및 재시도를 이벤트 기반으로 설계해 **대규모 수집 누락률을 현저히 낮추는 성과**를 냈습니다.
